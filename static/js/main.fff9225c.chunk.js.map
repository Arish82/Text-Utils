{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","e","document","target","innerText","togglemode","htmlFor","TextForm","useState","text","settext","texts","style","color","heading","rows","value","onChange","backgroundColor","atext","toUpperCase","showAlert","toLowerCase","trim","split","length","getElementById","innerHTML","Alert","alert","role","slice","msg","defaultProps","about","App","darkmode","setdarkmode","setalert","showalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fff9225c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    const runs=(e)=>{\r\n        document.title=\"TextUtils - \"+e.target.innerText;\r\n    }\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link active homebtn\" id=\"homebtn\" aria-current=\"page\" href=\"#\" onClick={runs}>Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                        <Link className=\"nav-link homebtn\" aria-current=\"page\" to=\"/about\" onClick={runs}>{props.about}</Link>\r\n                        </li> */}\r\n                        {/* <li className=\"nav-item dropdown\">\r\n                        <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                            Dropdown\r\n                        </a>\r\n                        <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                            <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n                            <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                            <li><hr className=\"dropdown-divider\"/></li>\r\n                            <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n                        </ul>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                        <div className=\"form-check form-switch\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"  onClick={props.togglemode}/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"></label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string \r\n}; \r\n\r\nNavbar.defaultProps= {\r\n    title: 'Default App Name',\r\n    about: 'Default About'\r\n};","import React, {useState} from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,settext]= useState('');\r\n    function handUpClick(){\r\n        let atext=text.toUpperCase();\r\n        props.showAlert(\"Converted to Upper Case\",\"success\")\r\n        settext(atext);\r\n    }\r\n    function handLoClick(){\r\n        let atext=text.toLowerCase();\r\n        props.showAlert(\"Converted to Lower Case\",\"success\")\r\n        settext(atext);\r\n    }\r\n    const handleOnChange=(e)=>{\r\n        settext(e.target.value);\r\n    };\r\n    let texts=\"\";\r\n    const show=()=>{\r\n        texts=text;\r\n        let l=document.getElementById(\"paras\");\r\n        l.innerHTML=texts;\r\n    };\r\n    return (\r\n        <>\r\n        <div style={\r\n            {color: props.mode===\"dark\"?\"white\": \"black\"}\r\n        }>\r\n            <div className=\"mb-3\" >\r\n            <h1 className=\"text-center\">{props.heading}</h1>\r\n            <textarea className=\"form-control\" id=\"textarea\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode===\"dark\"?\"grey\": \"white\",color: props.mode===\"dark\"?\"white\":\"black\"}}></textarea>\r\n            </div>\r\n            <div className=\"col-auto\">\r\n                <button type=\"submit\" className=\"btn btn-primary m-1\" id=\"convertBtn\" onClick={handUpClick}>Convert to UpperCase</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-1\"  onClick={handLoClick}>Convert to LowerCase</button>\r\n            </div>\r\n        </div>\r\n        <div className=\"container\" style={{color: props.mode===\"dark\"?\"white\":\"black\"}}><p>{text.trim().split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008* text.trim().split(\" \").length} Minutes to read.</p>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-success \" id=\"convertBtn\" onClick={show}>Preview</button>\r\n        <p id=\"paras\" className=\"my-3 mx-3\" style={{color: props.mode===\"dark\"?\"white\":\"black\"}}>{texts}</p>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    // Cannot read prop null so for that we write props && other if first statement is false than will not go further\r\n    const upperCase=(e)=>{\r\n        return e[0].toUpperCase()+ e.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{upperCase(props.alert.type)}</strong>! {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","// {import logo from './logo.svg';}\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport {useState} from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [darkmode, setdarkmode] = useState(\"light\");\n  const toggleButton=()=>{\n    if(darkmode===\"light\"){\n      setdarkmode(\"dark\");\n      document.body.style.backgroundColor=\"#31386c\";\n      showalert(\"Dark mode has been enabled.\",\"success\");\n      document.title=\"TextUtils - DarkMode\";\n    }\n    else{\n      setdarkmode(\"light\");\n      document.body.style.backgroundColor=\"white\";\n      showalert(\"Light mode has been enabled.\",\"success\");\n      document.title=\"TextUtils - Home\";\n    }\n  }\n\n  const [alert, setalert] = useState(null);\n  const showalert=(message,type)=>{\n    setalert({\n        msg: message,\n        type: type\n      }\n    )\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n  return (\n    <>\n      {/* <Navbar/> */}\n        {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About TextUtils\" mode={darkmode} togglemode={toggleButton}/>\n      <Alert alert={alert}/>\n      <div className=\"container\">\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm heading=\"Enter the Text to analyse\" mode={darkmode} showAlert={showalert}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n        {/* </Router> */}\n      \n        {/* <div className=\"container\">\n          <About/>\n        </div> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}